@function cepheus-selector-nest($list) {
  $list: selector-nest($list);
  $result: ();

  @each $selector in $list {
    $result: join($result, cepheus-unquote-if-string($selector), space, false);
  }

  @return $result;
}

@function cepheus-unquote-if-string($value) {
  @return if(type-of($value) == string, unquote($value), $value);
}

@function cepheus-contains($list, $item) {
  @if index($list, $item) { @return true; }

  @return false;
}

@function cepheus-breakpoint-exists($breakpoint) {
  @if ((type-of($breakpoint) == string) and (map-has-key($cepheus-breakpoints, $breakpoint))) {
    @return true
  } @else {
    @return false
  }
}

@function cepheus-contains-any($list, $items) {
  @each $item in $items { @if index($list, $item) { @return true; } }

  @return false;
}

@function cepheus-to-list($value, $keep: 'both') {
  $keep: if(index('keys' 'values', $keep), $keep, 'both');

  @if type-of($value) == 'map' {
    $keys: ();
    $values: ();

    @each $key, $val in $value {
      $keys: append($keys, $key);
      $values: append($values, $val);
    }

    @if $keep == 'keys' {
      @return $keys;
    } @else if $keep == 'values' {
      @return $values;
    } @else {
      @return zip($keys, $values);
    }
  }

  @return if(type-of($value) != 'list', ($value,), $value);
}

// /// Replace `$search` with `$replace` in `$string`
// /// @author Hugo Giraudel
// /// @param {String} $string - Initial string
// /// @param {String} $search - Substring to replace
// /// @param {String} $replace ('') - New value
// /// @return {String} - Updated string
// @function str-replace($string, $search, $replace: '') {
//   $index: str-index($string, $search);
//
//   @if $index {
//     @return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
//   }
//
//   @return $string;
// }
