@function cepheus-strip-unit($number) {
  @if type-of($number) == 'number' and not unitless($number) {
    @return $number / ($number * 0 + 1);
  }

  @return $number;
}

// Check if a value is a non-negative integer
@function cepheus-is-integer ($value) {
  @return (unitless($value) and $value == round($value));
}

// Round value to the nearest quarter pixel
// This provides reasonable precision and prevents grid creep (by fractions adding up) in most browsers
@function cepheus-round ($value) {
  @return round($value * 4) / 4;
}


/// PLUMBER - Easy baseline grids with SASS
/// @author  Viktor Honti
/// @license MIT
/// @link https://jamonserrano.github.io/plumber-sass
@function cepheus-plumber(
  $baseline: null,
  $font-size: null,
  $line-height: null,
  $grid-height: null,
  $leading-top: 0,
  $leading-bottom: 0,
  $use-baseline-origin: false
) {
  @if not unitless($font-size) or $font-size <= 0 {
    @error '$font-size parameter must be a positive unitless number, got #{$font-size} instead';
  }

  @if not unitless($line-height) or $line-height != round($line-height) or $line-height < 1 {
    @error '$line-height parameter must be a positive unitless integer, got #{$line-height} instead';
  }

  @if not cepheus-is-integer($leading-top) {
    @error '$leading-top parameter must be a non-negative integer, got #{$leading-top} instead.';
  }

  @if not cepheus-is-integer($leading-bottom) {
    @error '$leading-bottom parameter must be a non-negative integer, got #{$leading-bottom} instead';
  }

  @if unitless($grid-height) or $grid-height < 0 {
    @error '$grid-height parameter must be a positive unit, got #{$grid-height} instead';
  }

  @if not $baseline {
    @error '$baseline must be passed as a parameter or defined in defaults';
  } @else if not (unitless($baseline) and $baseline >= 0 and $baseline < 1) {
    @error '$baseline parameter must be a unitless fraction between 0 and 1, got #{$baseline} instead';
  }

  @if type-of($use-baseline-origin) != bool {
    @error '$use-baseline-origin parameter must be Boolean, got #{$use-baseline-origin} instead';
  }

  // *** CALCULATE BASELINE CORRECTION ***
  // the distance of the original baseline from the bottom
  $baseline-from-bottom: ($line-height - $font-size) / 2 + ($font-size * $baseline);
  // the corrected baseline will be on the nearest gridline
  $corrected-baseline: round($baseline-from-bottom);
  // the difference between the original and the corrected baseline
  $baseline-difference: $corrected-baseline - $baseline-from-bottom;

  // if baseline origin is used for leadings substract the distance of the baseline from the edges
  @if $use-baseline-origin == true {
    $leading-top: $leading-top - ($line-height - $corrected-baseline);
    $leading-bottom: $leading-bottom - $corrected-baseline;
  }

  // *** CALCULATE FONT SIZE AND LINE HEIGHT
  $font-size: $font-size * $grid-height;
  $line-height: $line-height * $grid-height;

  // *** CALCULATE MARGINS AND PADDINGS ***
  $padding-top: null;
  $margin-top: null;
  $margin-bottom: null;
  $padding-bottom: null;

  @if $baseline-difference < 0 {
    // add top leading
    $margin-top: $leading-top * $grid-height;
    // push the baseline down to the next gridline
    $padding-top: - $baseline-difference * $grid-height;
    // add the remaining distance to reach the next gridline
    $padding-bottom: (1 + $baseline-difference) * $grid-height;
    // add bottom leading and remove the 1 excess grid height that comes from pushing down
    $margin-bottom: ($leading-bottom - 1) * $grid-height;
  } @else {
    // add top leading and remove the 1 excess grid height that comes from pulling up
    $margin-top: ($leading-top - 1) * $grid-height;
    // pull the baseline up to the previous gridline
    $padding-top: (1 - $baseline-difference) * $grid-height;
    // add the remaining distance to reach the next gridline
    $padding-bottom: $baseline-difference * $grid-height;
    // add bottom leading
    $margin-bottom: $leading-bottom * $grid-height;
  }

  // round pixel values to decrease browser inconsistencies
  @if unit($grid-height) == 'px' {
    $line-height: cepheus-round($line-height);
    $margin-bottom: cepheus-round($margin-bottom);
    $margin-top: cepheus-round($margin-top);
    $padding-bottom: cepheus-round($padding-bottom);
    $padding-top: cepheus-round($padding-top);
  }

  @return (
  'font-size': $font-size,
  'line-height': $line-height,
  'margin-bottom': $margin-bottom,
  'margin-top': $margin-top,
  'padding-bottom': $padding-bottom,
  'padding-top': $padding-top,
  );
}

@function cepheus-font-size ($key) {
  @return map-get(map-get($cepheus-type-scale, '#{$key}'), 'font-size')
}

@function cepheus-line-height ($key) {
  @return map-get(map-get($cepheus-type-scale, '#{$key}'), 'line-height')
}

@function cepheus-spacing ($key) {
  @if type-of($key) == 'number' {
    @if $key == 0 {
      @return 0
    } @else if $key < 0 {
      @return -1 * map-get($cepheus-spacing-scale, '#{abs($key)}')
    } @else {
      @return map-get($cepheus-spacing-scale, '#{$key}')
    }
  } @else {
    @error 'Cepheus: cepheus-spacing argument must be a number'
  }
}

@function cepheus-get-font-fallback ($slug) {
  @if map-has-key($cepheus-fonts, $slug) {
    $font: map-get($cepheus-fonts, $slug);

    @if map-has-key($font, 'font-family-fallback') and type-of(map-get($font, 'font-family-fallback') == 'string') {
      @return unquote(map-get($font, 'font-family-fallback'))
    } @else if map-has-key($font, 'font-letterform') and map-has-key($cepheus-font-family-fallback, map-get($font, 'font-letterform')) {
      @return map-get($cepheus-font-family-fallback, map-get($font, 'font-letterform'));
    } @else {
      @error 'Cepheus: font-slug "#{$font}" has no font-family fallback'
    }
  } @else {
    @error 'Cepheus: font-slug "#{$font}" is invalid'
  }
}

@function cepheus-selector-nest($list) {
  $list: selector-nest($list);
  $result: ();

  @each $selector in $list {
    $result: join($result, cepheus-unquote-if-string($selector), space, false);
  }

  @return $result;
}

@function cepheus-unquote-if-string($value) {
  @return if(type-of($value) == string, unquote($value), $value);
}

@function cepheus-contains($list, $item) {
  @if index($list, $item) { @return true; }

  @return false;
}

@function cepheus-breakpoint-exists($breakpoint) {
  @if ((type-of($breakpoint) == string) and (map-has-key($cepheus-breakpoints, $breakpoint))) {
    @return true
  } @else {
    @return false
  }
}

@function cepheus-contains-any($list, $items) {
  @each $item in $items { @if index($list, $item) { @return true; } }

  @return false;
}

@function cepheus-to-list($value, $keep: 'both') {
  $keep: if(index('keys' 'values', $keep), $keep, 'both');

  @if type-of($value) == 'map' {
    $keys: ();
    $values: ();

    @each $key, $val in $value {
      $keys: append($keys, $key);
      $values: append($values, $val);
    }

    @if $keep == 'keys' {
      @return $keys;
    } @else if $keep == 'values' {
      @return $values;
    } @else {
      @return zip($keys, $values);
    }
  }

  @return if(type-of($value) != 'list', ($value,), $value);
}

/// A small function allowing skipping base64 encoding
/// and simply pasting the SVG markup right in the CSS.
/// @author Jakob Eriksen
/// @link http://codepen.io/jakob-e/pen/doMoML
/// @param {String} $svg - SVG image to encode
/// @return {String} - Encoded SVG data uri
@function cepheus-svg-uri($svg) {
  $encoded: '';
  $slice: 2000;
  $index: 0;
  $loops: ceil(str-length($svg) / $slice);

  @for $i from 1 through $loops {
    $chunk: str-slice($svg, $index, $index + $slice - 1);
    // scss:
    $chunk: cepheus-str-replace($chunk, '"', "'"); // sass-lint:disable-line quotes
    $chunk: cepheus-str-replace($chunk, '<', '%3C');
    $chunk: cepheus-str-replace($chunk, '>', '%3E');
    $chunk: cepheus-str-replace($chunk, '&', '%26');
    $chunk: cepheus-str-replace($chunk, '#', '%23');
    $encoded: #{$encoded}#{$chunk};
    $index: $index + $slice;
  }

  @return url("data:image/svg+xml;charset=utf8,#{$encoded}"); // sass-lint:disable-line quotes
}

/// Replace `$search` with `$replace` in `$string`
/// @author Hugo Giraudel
/// @link http://sassmeister.com/gist/1b4f2da5527830088e4d
/// @param {String} $string - Initial string
/// @param {String} $search - Substring to replace
/// @param {String} $replace ('') - New value
/// @return {String} - Updated string
@function cepheus-str-replace($string, $search, $replace: '') {
  $index: str-index($string, $search);

  @if $index {
    @return str-slice($string, 1, $index - 1) + $replace + cepheus-str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
  }

  @return $string;
}

@function cepheus-svg-color ($color) {
  @return 'rgb(#{red($color)},#{green($color)},#{blue($color)})'
}

@function cepheus-svg-grid ($rows: 10, $columns: 5, $zoom: 1) {
  $size: if($rows >= $columns, $rows * $cepheus-grid-size, $columns * $cepheus-grid-size);
  $color-major: map-get($cepheus-colors, 'gold');
  $color-minor: map-get($cepheus-colors, 'mid-gray');

  $svg: '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100">';

  @for $i from 0 through $rows {
    $color: cepheus-svg-color(if($i == 0 or $i == $rows, $color-major, $color-minor));
    $step: 100 / $rows;
    $y: $step * $i;
    $opacity: 1.5 * (0.1 + abs(0.5 - (abs($i - $rows) / $rows)));
    $svg: $svg + '<line y1="#{$y}" y2="#{$y}" x1="0" x2="100" style="stroke:#{$color};stroke-opacity:#{$opacity};stroke-width:1"/>';
  }

  @for $i from 0 through $columns {
    $color: cepheus-svg-color(if($i == 0 or $i == $columns, $color-major, $color-minor));
    $step: 100 / $columns;
    $x: 100 - ($step * $i);
    $opacity: 1.5 * (0.1 + abs(0.5 - (abs($i - $columns) / $columns)));
    $svg: $svg + '<line x1="#{$x}" x2="#{$x}" y1="0" y2="100" style="stroke:#{$color};stroke-opacity:#{$opacity};stroke-width:1"/>';
  }

  $svg: $svg + '</svg>';

  $property-map: (
    'background-image': cepheus-svg-uri($svg),
    'background-size': $size * $zoom $size * $zoom,
    'background-position': 0 0,
    'background-repeat': repeat
  );

  @return $property-map
}

