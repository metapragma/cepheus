@function cepheus-spacing ($key) {
  @if type-of($key) == 'number' {
    @if $key == 0 {
      @return 0
    } @else if $key < 0 {
      @return -1 * map-get($cepheus-spacing-scale, '#{abs($key)}')
    } @else {
      @return map-get($cepheus-spacing-scale, '#{$key}')
    }
  } @else {
    @error 'Cepheus: cepheus-spacing key must be a number'
  }
}

@function cepheus-get-font-fallback ($slug) {
  @if map-has-key($cepheus-fonts, $slug) {
    $font: map-get($cepheus-fonts, $slug);

    @if map-has-key($font, 'font-family-fallback') and type-of(map-get($font, 'font-family-fallback') == 'string') {
      @return unquote(map-get($font, 'font-family-fallback'))
    } @else if map-has-key($font, 'font-letterform') and map-has-key($cepheus-font-family-fallback, map-get($font, 'font-letterform')) {
      @return map-get($cepheus-font-family-fallback, map-get($font, 'font-letterform'));
    } @else {
      @error 'Cepheus: font-slug "#{$font}" has no font-family fallback'
    }
  } @else {
    @error 'Cepheus: font-slug "#{$font}" is invalid'
  }
}

@function cepheus-selector-nest($list) {
  $list: selector-nest($list);
  $result: ();

  @each $selector in $list {
    $result: join($result, cepheus-unquote-if-string($selector), space, false);
  }

  @return $result;
}

@function cepheus-unquote-if-string($value) {
  @return if(type-of($value) == string, unquote($value), $value);
}

@function cepheus-contains($list, $item) {
  @if index($list, $item) { @return true; }

  @return false;
}

@function cepheus-breakpoint-exists($breakpoint) {
  @if ((type-of($breakpoint) == string) and (map-has-key($cepheus-breakpoints, $breakpoint))) {
    @return true
  } @else {
    @return false
  }
}

@function cepheus-contains-any($list, $items) {
  @each $item in $items { @if index($list, $item) { @return true; } }

  @return false;
}

@function cepheus-to-list($value, $keep: 'both') {
  $keep: if(index('keys' 'values', $keep), $keep, 'both');

  @if type-of($value) == 'map' {
    $keys: ();
    $values: ();

    @each $key, $val in $value {
      $keys: append($keys, $key);
      $values: append($values, $val);
    }

    @if $keep == 'keys' {
      @return $keys;
    } @else if $keep == 'values' {
      @return $values;
    } @else {
      @return zip($keys, $values);
    }
  }

  @return if(type-of($value) != 'list', ($value,), $value);
}
